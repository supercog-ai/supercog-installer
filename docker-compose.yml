services:
  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: pgvector/pgvector:pg16
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-pguser}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB:-postgres}
      - POSTGRES_HOST_AUTH_METHOD=trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "psql -U $${POSTGRES_USER} -d $${POSTGRES_DB} -c 'SELECT 1'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  minio:
    image: bitnami/minio:latest
    restart: unless-stopped
    ports:
      - '${MINIO_API_PORT_NUMBER:-9002}:${MINIO_API_PORT_NUMBER:-9002}'
      - '${MINIO_CONSOLE_PORT_NUMBER:-9003}:${MINIO_CONSOLE_PORT_NUMBER:-9003}'
    environment:
      - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID:-minioadmin}
      - MINIO_ROOT_PASSWORD=${AWS_SECRET_KEY:-minioadmin}
      - MINIO_DEFAULT_BUCKETS=${S3_PUBLIC_BUCKET:-supercog-public}:public,${S3_FILES_BUCKET_NAME:-supercog-files}:public
      - MINIO_API_PORT_NUMBER=${MINIO_API_PORT_NUMBER:-9002}
      - MINIO_CONSOLE_PORT_NUMBER=${MINIO_CONSOLE_PORT_NUMBER:-9003}
    volumes:
      - minio_data:/bitnami/minio/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MINIO_API_PORT_NUMBER:-9002}/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  engine:
    image: ${REGISTRY_URL}/engine:${ENGINE_VERSION:-latest}
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    env_file: .env
    environment:
      - SPECIAL_TOOLS=1
      - SUPERCOG_LOCAL_TOOLS=/var/lib/supercog/tools
    volumes:
      - ./local_data/sc_localfiles:/var/lib/supercog
      - ./local_data/tools:/var/lib/supercog/tools
      - supercog_data:/var/lib/supercog/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  triggersvc:
    image: ${REGISTRY_URL}/engine:${ENGINE_VERSION:-latest}
    restart: unless-stopped
    command: python -m supercog.engine.triggersvc
    ports:
      - "8002:8002"
    depends_on:
      engine:
        condition: service_healthy
    env_file: .env
    volumes:
      - ./local_data/sc_localfiles:/var/lib/supercog
      - ./local_data/tools:/var/lib/supercog/tools
      - supercog_data:/var/lib/supercog/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  dashboard:
    image: ${REGISTRY_URL}/dashboard:${DASHBOARD_VERSION:-latest}
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "8000:8000"
    depends_on:
      engine:
        condition: service_healthy
    env_file: .env
    environment:
      - SKIP_EMAIL_VERIFICATION=1
      - ENGINE_URL=http://engine:8080
      - TRIGGERSVC_URL=http://triggersvc:8002
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  supercog_data:
  postgres_data:
  redis_data:
  minio_data:
